{"version":3,"sources":["Zomato_company_logo.png","Rolling-1s-200px.svg","Home.js","Zomato.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","props","react_default","a","createElement","style","marginTop","margin","width","Link","to","className","src","ZomatoLogo","alt","Zomato","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","lon","collections","_this2","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","fetch","concat","method","headers","x-zomato-api-key","then","res","json","data","setState","catch","err","console","log","length","map","collection","target","href","share_url","key","collection_id","image_url","borderRadius","title","description","loader","Component","App","BrowserRouter","textDecoration","color","Route","exact","path","component","src_Home","src_Zomato","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.090073c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Zomato_company_logo.c9708061.png\";","module.exports = __webpack_public_path__ + \"static/media/Rolling-1s-200px.0e30a1f2.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ZomatoLogo from \"./Zomato_company_logo.png\";\n\nconst Home = props => (\n  <div>\n    <h2 style={{ marginTop: \"3em\" }}>\n      Choose among your favourite online shops:{\" \"}\n    </h2>\n    <div style={{ margin: \"2em auto\", width: \"200px\" }}>\n      <Link to=\"/zomato\">\n        <img\n          className=\"zomato-logo\"\n          src={ZomatoLogo}\n          alt=\"zomato-logo\"\n          width={200}\n        />\n      </Link>\n    </div>\n  </div>\n);\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport loader from \"./Rolling-1s-200px.svg\";\n\nclass Zomato extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: \"\",\n      lon: \"\",\n      collections: []\n    };\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(pos => {\n      if (pos) {\n        const lat = pos.coords.latitude;\n        const lon = pos.coords.longitude;\n        fetch(\n          `https://developers.zomato.com/api/v2.1/collections?lat=${lat}&lon=${lon}`,\n          {\n            method: \"get\",\n            headers: {\n              \"x-zomato-api-key\": \"ae722d6c67df2370feba8eb08f6f8a59\"\n            }\n          }\n        )\n          .then(res => res.json())\n          .then(data => {\n            this.setState({\n              lat: lat,\n              lon: lon,\n              collections: data.collections\n            });\n          })\n          .catch(err => console.log(`there has been an err ${err}`));\n      } else {\n        // Geolocation is disabled\n      }\n    });\n  }\n\n  render() {\n    this.state.collections.length &&\n      console.log(\"collections\", this.state.collections);\n    return (\n      <div className=\"zomato\">\n        {this.state.collections.length ? (\n          this.state.collections.map(collection => (\n            <a target=\"_blank\" href={collection.collection.share_url}>\n              <div\n                className=\"collections\"\n                key={collection.collection.collection_id}\n              >\n                <img\n                  src={collection.collection.image_url}\n                  alt=\"collec\"\n                  style={{ width: \"inherit\", borderRadius: \"5px\" }}\n                />\n                <div className=\"collection-text\">\n                  <h3>{collection.collection.title}</h3>\n                  <p>{collection.collection.description}</p>\n                </div>\n              </div>\n            </a>\n          ))\n        ) : (\n          <img\n            style={{ marginTop: \"7em\" }}\n            src={loader}\n            alt=\"loader\"\n            width={100}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Zomato;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Zomato from \"./Zomato\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <nav className=\"navbar\">\n            <Link\n              to=\"/AnyFood/\"\n              style={{ textDecoration: \"none\", color: \"white\" }}\n            >\n              <b>AnyFood</b>\n            </Link>\n          </nav>\n\n          <Route exact path=\"/AnyFood/\" component={() => <Home />} />\n          <Route exact path=\"/AnyFood/zomato\" component={() => <Zomato />} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}